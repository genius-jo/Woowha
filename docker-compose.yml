version: "3.8"

services:
  redis:
    image: "redis:alpine"
    networks:
      - team-d
    ports:
      - "6379:6379"

  postgres_db:
    image: "postgres"
    restart: always
    networks:
      - app-tier
    volumes:
      - ./postgresql/db:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    cap_add:
      - SYS_NICE
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=1234

  webserver:
    image: shanesoh/webserver
    build:
      context: .
      dockerfile: ./webserver
    ports:
      - "5000:5000"
    networks:
      - team-d
    depends_on:
      - redis
    env_file:
      - app.env
    environment:
      - CLIENT_SLEEP=0.25 # Time in ms between each poll by web server against Redis
      - CLIENT_MAX_TRIES=100 # Num tries by web server to retrieve results from Redis before giving up
    restart: always
    volumes:
      - ./flask/web:/app
    deploy:
      placement:
        constraints:
          - node.role == manager

  modelserver:
    image: shanesoh/modelserver
    build: ./modelserver
    depends_on:
      - redis
    networks:
      - deployml_network
    env_file:
      - app.env
    environment:
      - SERVER_SLEEP=0.25 # Time in ms between each poll by model server against Redis
      - BATCH_SIZE=32
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker

  client:
    build:
      context: .
      dockerfile: ./client/Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app/src
      - "/app/node_modules"
    networks:
      - team-d
    restart: always
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=ture

networks:
  team-d:
    driver: bridge
